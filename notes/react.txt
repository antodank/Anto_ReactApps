if npx is not installed -
npm i -g npx

Create a normal folder - open code - run following command
npx create-react-app my-app
cd my-app
npm start

or 

create application named folder (letters,numbers and hyphen)
npx create-react-app .
npm start

-------------------------------------------------

public/index.html is the page template
contains - 
<div id="root"></div>
this a “root” DOM node because everything inside it will be managed by React DOM.

src/index.js is the JavaScript entry point
contains - 
import React from 'react'; // for react application
import ReactDOM from 'react-dom';  // for react DOM

ReactDOM.render(element,document.getElementById('root')

-elements are the smallest building blocks of React apps.
- React elements are plain objects, and are cheap to create
const element = <h1>Hello, world</h1>;  is  also a valid element.
- components are made up of elements

We need to put any JS and CSS files inside src

-------------------------------------------------
React component

- Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. 

- components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements 

- All React component names must start with a capital letter. 
If you start a component name with a lowercase letter, it will be treated like a built-in element like <div>,<input>

export default function App({props}) {
return(
<div> </div>
)
}

Function Components

To Create Function Component - 
rfc + enter

Class Components
To Create Function Component - 
rcc + enter



- Components can refer to other components in their output. 

- Typically, new React apps have a single App component at the very top

- always split components into smaller components.

- All React components must act like pure functions with respect to their props.